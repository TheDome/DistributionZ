name: Compile assets

on:
  release:
    types:
      - released

jobs:
  compile-release-assets:
    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Build on Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.5.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set version
        shell: bash
        run: |
          npm version --no-git-tag-version ${{ github.event.release.tag_name }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - run: yarn --frozen-lockfile
      - run:  |
          yarn build
        name: Build
      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        if: runner.os == 'linux'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/DistributionZ-${{ github.event.release.tag_name }}.AppImage
          asset_name: DistributionZ-${{ github.event.release.tag_name }}.AppImage
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (Mac)
        uses: actions/upload-release-asset@v1
        if: runner.os == 'macos'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/DistributionZ-${{ github.event.release.tag_name }}.dmg
          asset_name: DistributionZ-${{ github.event.release.tag_name }}.dmg
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (Mac/ZIP)
        uses: actions/upload-release-asset@v1
        if: runner.os == 'macos'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/DistributionZ-${{ github.event.release.tag_name }}-mac.zip
          asset_name: DistributionZ-${{ github.event.release.tag_name }}-mac.zip
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        if: runner.os == 'windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/DistributionZ Setup ${{ github.event.release.tag_name }}.exe
          asset_name: DistributionZ Setup ${{ github.event.release.tag_name }}.exe
          asset_content_type: application/octet-stream

  create-auto-update-scripts:
    runs-on: ubuntu-latest
    needs: 
    - compile-linux-release-assets
    steps:
      # Download artifact and create sha512 checksum
      - name: Create latest config
        uses: actions/github-script@v5
        with: 
          script: |
            const latestYml = {
              releaseNotes: context.payload.release.body,
              releaseName: `Savannah ${context.payload.release.tag_name}`,
              version: context.payload.release.tag_name,
              files: []
            };

            const latestMacYaml = JSON.parse(JSON.stringify(latestYml));
            const latestLinuxYaml = JSON.parse(JSON.stringify(latestYml));

            const assets = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });

            assets.data.forEach(asset => {
              if (asset.name.endsWith('.exe')) {
                latestYml.files.push({
                  url: asset.browser_download_url,
                  sha512: asset.checksum,
                  size: asset.size,
                  arch: 'x64'
                });
              } else if (asset.name.endsWith('mac.zip')) {
                latestMacYaml.files.push({
                  url: asset.browser_download_url,
                  sha512: asset.checksum,
                  size: asset.size,
                  arch: 'x64'
                });
              } else if (asset.name.endsWith('.AppImage')) {
                latestLinuxYaml.files.push({
                  url: asset.browser_download_url,
                  sha512: asset.checksum,
                  size: asset.size,
                  arch: 'x64'
                });
              }
            });

            // Attach to release 
            [{name: "latest.yaml", data: latestYml}, {name: "latest-mac.yaml", data: latestMacYaml}, {name: "latest-linux.yaml", data: latestLinuxYaml}].forEach(async (file) => {
              await github.rest.repos.createReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                name: file.name,
                data: JSON.stringify(file.data, null, 2)
              });
            });
