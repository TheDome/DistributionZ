name: Compile assets

on:
  release:
    types:
      - released

jobs:
  compile-linux-release-assets:
    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Build on Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.5.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set version
        shell: bash
        run: |
          npm version --no-git-tag-version ${{ github.event.release.tag_name }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - run: yarn --frozen-lockfile
      - run:  |
          yarn build
        name: Build
      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        if: runner.os == 'linux'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/DistributionZ-${{ github.event.release.tag_name }}.AppImage
          asset_name: DistributionZ-${{ github.event.release.tag_name }}.AppImage
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (Mac)
        uses: actions/upload-release-asset@v1
        if: runner.os == 'macos'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/DistributionZ-${{ github.event.release.tag_name }}.dmg
          asset_name: DistributionZ-${{ github.event.release.tag_name }}.dmg
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        if: runner.os == 'windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/DistributionZ Setup ${{ github.event.release.tag_name }}.exe
          asset_name: DistributionZ Setup ${{ github.event.release.tag_name }}.exe
          asset_content_type: application/octet-stream

  create-auto-update-scripts:
    runs-on: ubuntu-latest
    steps:
      # Simply create a file named 
      # latest.yml with the following content:
      # releaseNotes: ${{ github.event.release.body }}
      # releaseName: Savannah ${{ github.event.release.tag_name }}
      - uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const latestYml = {
              releaseNotes: context.payload.release.body,
              releaseName: `Savannah ${context.payload.release.tag_name}`,
            };

            fs.writeFileSync(path.join('${{ github.workspace }}', 'latest.yml'), latestYml);
      - run: |
          cp latest.yml latest-mac.yml
          cp latest.yml latest-linux.yml
      # Upload this to the release
      - name: Upload Release Asset (latest.yml)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./latest.yml
          asset_name: latest.yml
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (latest-mac.yml)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./latest-mac.yml
          asset_name: latest-mac.yml
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (latest-linux.yml)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./latest-linux.yml
          asset_name: latest-linux.yml
          asset_content_type: application/octet-stream
